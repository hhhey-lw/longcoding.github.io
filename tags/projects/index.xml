<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on LongCoding&#39;s Blog</title>
    <link>http://longcoding.top/tags/projects/</link>
    <description>Recent content in Projects on LongCoding&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Mar 2025 19:36:21 +0800</lastBuildDate>
    <atom:link href="http://longcoding.top/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Grouptradingproject</title>
      <link>http://longcoding.top/posts/jobs/groupbuymarketproject/</link>
      <pubDate>Sun, 23 Mar 2025 19:36:21 +0800</pubDate>
      <guid>http://longcoding.top/posts/jobs/groupbuymarketproject/</guid>
      <description>&lt;h1 id=&#34;拼团交易平台系统&#34;&gt;拼团交易平台系统&lt;/h1&gt;&#xA;&lt;p&gt;**项目背景：**为了盘活沉睡用户，需要适当降低商品价格。但为了达到传播的效果，所以需要引入拼团方式，以客带客，靠用户自身传播的方式进行交易拉新。这样的处理方式对比于 KOL，会让利商品价值到用户自身。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第1-2节-拼团库表设计&#34;&gt;第1-2节 拼团库表设计&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;业务流程：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;#ZgotmplZ&#34; alt=&#34;image-20250323194301660&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;运营角度：&lt;/em&gt; 1. 给哪些商品配置拼单；2. 拼团商品提供的规则信息：折扣、时间、人数等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;用户角度：&lt;/em&gt; 1. 参与拼团，首次发起or参与现有，拼单完成回调通知。&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;库表设计：&lt;/em&gt; 1. 人群设计，将所有符合某个条件的用户ID，全部写入特定Redis记录中。&lt;/li&gt;&#xA;&lt;li&gt;拼团活动，折扣的多种迭代。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;库表设计：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;拼团配置表&lt;/em&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;#ZgotmplZ&#34; alt=&#34;image-20250323194814202&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拼团活动表：设定了拼团的成团规则，人群标签的使用可以限定哪些人可见，哪些人可参与。&lt;/li&gt;&#xA;&lt;li&gt;折扣配置表：拆分出拼团优惠到一个新的表进行多条配置。如果折扣还有更多的复杂规则，则可以配置新的折扣规则表进行处理。&lt;/li&gt;&#xA;&lt;li&gt;人群标签表：专门来做人群设计记录的，这3张表就是为了把符合规则的人群ID，也就是用户ID，全部跑任务到一个记录下进行使用。 比如黑玫瑰人群、高净值人群、拼团履约率90%以上的人群等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;参与拼团表：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;#ZgotmplZ&#34; alt=&#34;image-20250323195108167&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拼团账户表：记录用户的拼团参与数据，一个是为了限制用户的参与拼团次数，另外是为了人群标签任务统计数据。&lt;/li&gt;&#xA;&lt;li&gt;用户拼单表：当有用户发起首次拼单的时候，产生拼单id，并记录所需成团的拼单记录，另外是写上拼团的状态、唯一索引、回调接口等。这样拼团完成就可以回调对接的平台，通知完成了。【微信支付也是这样的设计，回调支付结果，这样的设计可以方便平台化对接】当再有用户参与后，则写入用户拼单明细表。直至达成拼团&lt;/li&gt;&#xA;&lt;li&gt;回调任务表：当拼团完成后，要做回调处理。但可能会有失败，所以加入任务的方式进行补偿。如果仍然失败，则需要对接的平台，自己查询拼团结果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;第1-3节-研发系统设计&#34;&gt;第1-3节 研发系统设计&lt;/h3&gt;&#xA;&lt;p&gt;进行研发系统设计。包括：库表设计、用例图、系统建模、工程模型、功能流程、UML时序图。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用例图：用户与系统交互最简表示形式；&lt;/li&gt;&#xA;&lt;li&gt;流程图：功能节点的串联关系；&lt;/li&gt;&#xA;&lt;li&gt;时序图：展示了整个拼团过程所涉及的系统模块和流转关系&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;系统架构：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;MVC架构&lt;/em&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;C:\Users\韦龙\AppData\Roaming\Typora\typora-user-images\image-20250323200411716.png&#34; alt=&#34;image-20250323200411716&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;p&gt;&lt;em&gt;DDD架构&lt;/em&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;C:\Users\韦龙\AppData\Roaming\Typora\typora-user-images\image-20250323200448795.png&#34; alt=&#34;image-20250323200448795&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;h3 id=&#34;第2-2节-试算模型抽象模板设计&#34;&gt;第2-2节 试算模型抽象模板设计&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;引入设计模式进行解耦和实现，提高工程代码的扩展性&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;=&amp;gt; 设计模式抽象模板的通用结构定义，添加一个 tree规则树抽象模型，在引入到工程中进行使用。这样后续工程中就可以不断的定义通用的设计模式被不同的场景统一使用了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;模型设计&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;链式的多分支规则树模型结构，由功能节点自行决定后续流程的执行链路。它的设计比责任链的扩展性更好，自由度也更高&lt;/p&gt;&#xA;&lt;img src=&#34;C:\Users\韦龙\AppData\Roaming\Typora\typora-user-images\image-20250323212011895.png&#34; alt=&#34;image-20250323212011895&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，定义抽象的通用规则树模型结构&#xA;&lt;ul&gt;&#xA;&lt;li&gt;涵盖：StrategyMapper, StrategyHandler /ˈstrætədʒi/、AbstractStrategyRouter&amp;lt;T, D, R&amp;gt;。 通过泛型设计允许使用方可以自定义出入参和动态上下文，让抽象模板模型具有通用性。&lt;/li&gt;&#xA;&lt;li&gt;之后，由使用方自定义出工厂、功能抽象类和一个个流程流转的节点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;编码实现&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;项目工程的Types模块中，添加通用设计模式模板&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;1.1 策略映射器&lt;/em&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StrategyMapper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * 获取待执行策略&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param requestParameter 入参&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param dynamicContext   上下文&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @return 返参&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @throws Exception 异常&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StrategyHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;requestParameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dynamicContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;用于获取每个执行的节点，责任链加强版&lt;/li&gt;&#xA;&lt;li&gt;T，D，R：入参，上下文，反参&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;1.2 策略受理器&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
