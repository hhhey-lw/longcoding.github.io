<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on LongCoding&#39;s Blog</title>
    <link>longcoding.top/tags/jvm/</link>
    <description>Recent content in JVM on LongCoding&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="longcoding.top/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JVM面试题笔记</title>
      <link>longcoding.top/posts/jobs/jvm/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>longcoding.top/posts/jobs/jvm/</guid>
      <description>&lt;h3 id=&#34;521-java如何实现跨平台的&#34;&gt;521. Java如何实现跨平台的？&lt;/h3&gt;&#xA;&lt;p&gt;Java编译生成的是字节码文件.class文件，而不是特定于某个操作系统的机器码。&lt;/p&gt;&#xA;&lt;p&gt;不同操作系统上都有各自实现的JVM，负责将字节码翻译成特定平台的机器代码并执行。使得JAVA文件可以被不同操作系统上的JVM运行。包装了一层。&lt;/p&gt;&#xA;&lt;h3 id=&#34;9807-jvm的组成部分&#34;&gt;9807. JVM的组成部分&lt;/h3&gt;&#xA;&lt;p&gt;主要组成部分：&lt;/p&gt;&#xA;&lt;p&gt;编译好的JAVA字节码（.class文件）准备就绪。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类加载器子系统：将class文件加载到内存中(运行时的数据区)。&lt;/li&gt;&#xA;&lt;li&gt;运行时数据区。&lt;/li&gt;&#xA;&lt;li&gt;执行引擎(命令解释器)：将字节码文件翻译成机器码，并交给CPU执行；&lt;/li&gt;&#xA;&lt;li&gt;本地方法接口：过程中会调用不同语言提供的接口，比如驱动和..，调用本地方法接口，例如操作系统级别的功能或者高性能库。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;img src=&#34;http://sthda9dn6.hd-bkt.clouddn.com/FtrSjvLjXEixufKxk9avjPMmQNpg&#34; alt=&#34;image-20250314162756632&#34; style=&#34;zoom:50%;&#34; /&gt;&#xA;&lt;h3 id=&#34;522-编译执行和解释执行&#34;&gt;522. 编译执行和解释执行&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;编译执行&lt;/strong&gt;&lt;/em&gt;：先将源代码编译为机器代码，再在CPU上运行。例如：C，C++；&lt;/p&gt;&#xA;&lt;p&gt;​&#x9;啊&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优点：编译后运行速度快，并且运行时，不需要再进行翻译。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;解释执行&lt;/strong&gt;&lt;/em&gt;：运行时，解释器逐行翻译并执行例如Python。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;跨平台性好， 每个代码都是在每个平台上通过相应平台的解释器运行。&lt;/li&gt;&#xA;&lt;li&gt;速度慢，每次执行都需要动态翻译。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;=&amp;gt; Java采样编译执行和解释执行相结合的方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解释执行：JVM将.JAVA文件=&amp;gt;.class字节码。 有助于程序的跨平台性；&lt;/li&gt;&#xA;&lt;li&gt;即时编译：将经常执行的代码编译为本地机器码，避免反复解释&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;523-jvm的内存区域如何划分的&#34;&gt;523. JVM的内存区域如何划分的❗?&lt;/h3&gt;&#xA;&lt;p&gt;JVM运行时的数据区分为：1. &lt;strong&gt;方法区&lt;/strong&gt; 2. &lt;strong&gt;堆&lt;/strong&gt; 3. &lt;strong&gt;虚拟机栈&lt;/strong&gt; 4. &lt;strong&gt;本地方法栈&lt;/strong&gt; 5. 程序计数器。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;方法区&lt;/strong&gt; - 存储类&amp;amp;共享信息&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储类信息、常量、静态变量&lt;/li&gt;&#xA;&lt;li&gt;这些信息属于线程共享区域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Java&lt;strong&gt;堆&lt;/strong&gt; - 与JVM共存亡&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存放所有线程共享的对象实例 和 数组 (垃圾回收主要战地)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;虚拟机&lt;strong&gt;栈&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;每个线程&lt;/strong&gt;创建一个栈：用来保存&lt;strong&gt;局部变量&lt;/strong&gt;、&lt;strong&gt;操作数栈&lt;/strong&gt;、方法出口信息。&lt;/li&gt;&#xA;&lt;li&gt;局部变量：基本数据类型；以及对象引用；&lt;/li&gt;&#xA;&lt;li&gt;栈与线程共存亡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本地方法栈&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为本地方法服务。。。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;程序计数器&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保存&lt;strong&gt;当前线程&lt;/strong&gt;执行的字节码指令地址或行号。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://sthda9dn6.hd-bkt.clouddn.com/FirLgeEVeLb4N108rU7mpuX1BdPY&#34; alt=&#34;image-20250314165936676&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;总结java程序与线程在jvm内存中的流程&#34;&gt;总结：Java程序与线程在JVM内存中的流程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;程序启动&lt;/strong&gt;：JVM初始化内存区域，加载&lt;strong&gt;类信息&lt;/strong&gt;到&lt;strong&gt;方法区&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程创建&lt;/strong&gt;：为&lt;strong&gt;线程&lt;/strong&gt;分配&lt;strong&gt;程序计数器&lt;/strong&gt;、Java虚拟机&lt;strong&gt;栈&lt;/strong&gt;和本地方法&lt;strong&gt;栈&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;方法调用&lt;/strong&gt;：&lt;strong&gt;线程&lt;/strong&gt;执行方法时，&lt;strong&gt;创建栈帧并压入Java虚拟机栈&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;对象创建&lt;/strong&gt;：&lt;strong&gt;对象实例存储在Java堆中&lt;/strong&gt;，元数据存储在方法区。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;垃圾回收&lt;/strong&gt;：JVM清理不再使用的对象和类信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程结束&lt;/strong&gt;：线程的栈和程序计数器被销毁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;程序结束&lt;/strong&gt;：JVM释放所有内存区域并退出。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;524-jvm中堆和栈的区别是什么&#34;&gt;524. JVM中堆和栈的区别是什么？&lt;/h3&gt;&#xA;&lt;p&gt;栈：主要用于&lt;strong&gt;存储局部变量(基本类型+对象引用)和方法的调用信息(返回地址、参数等)&lt;/strong&gt;。线程执行时，会创建该线程的栈帧，被压入Java虚拟机栈中。 执行结束，线程栈帧被弹出(销毁)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
