<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JobLearning on LongCoding&#39;s Blog</title>
    <link>http://121.40.252.207/series/joblearning/</link>
    <description>Recent content in JobLearning on LongCoding&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://121.40.252.207/series/joblearning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>集合面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/collection/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/collection/</guid>
      <description>&lt;h3 id=&#34;6319-hashmap-原理&#34;&gt;6319 HashMap 原理&lt;/h3&gt;&#xA;&lt;p&gt;数据结构：数组 + 链表  （JAVA8之后：数组+链表+红黑树）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据结构&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jdk1.7：数组+链表，数组每个元素是一个链表的表头，当发生冲突，将新元素添加在头部(头插法)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;hash冲突：头插法，❗扩容时可能造成环形链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;jdk1.8：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引入红黑树，当链表节点超过8个，那么这个链表会转换为红黑树。查询时间由 O(n) 优化为 O(logn)。当节点小于6个，再转换为链表。&lt;/li&gt;&#xA;&lt;li&gt;hash冲突：尾插法，避免环形链表❗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;扩容机制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jdk1.7&#xA;&lt;ul&gt;&#xA;&lt;li&gt;扩容，元素会重新计算hash值，并分配到新的扩容数组中。⭐比较耗时&lt;/li&gt;&#xA;&lt;li&gt;扩容时，头插法，在多线程情况下，可能造成环形链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;jdk1.8&#xA;&lt;ul&gt;&#xA;&lt;li&gt;扩容时，利用了元素哈希值和旧数组容量关系，减少了重新计算的哈希次数&lt;/li&gt;&#xA;&lt;li&gt;扩容时，尾插法，避免环形链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用键的&lt;code&gt;hashcode()&lt;/code&gt;计算hash值，然后(n-1) &amp;amp; hash确定数组中的位置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVM面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/jvm/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/jvm/</guid>
      <description>&lt;h3 id=&#34;521-java如何实现跨平台的&#34;&gt;521. Java如何实现跨平台的？&lt;/h3&gt;&#xA;&lt;p&gt;Java编译生成的是字节码文件.class文件，而不是特定于某个操作系统的机器码。&lt;/p&gt;&#xA;&lt;p&gt;不同操作系统上都有各自实现的JVM，负责将字节码翻译成特定平台的机器代码并执行。使得JAVA文件可以被不同操作系统上的JVM运行。包装了一层。&lt;/p&gt;</description>
    </item>
    <item>
      <title>并发面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/juc/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/juc/</guid>
      <description>&lt;h3 id=&#34;1-如何创建多线程&#34;&gt;1 如何创建多线程&lt;/h3&gt;&#xA;&lt;p&gt;1） 实现&lt;strong&gt;Runnable&lt;/strong&gt;接口&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现run()方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyRunnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2）继承Thread类&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;重写run()方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;3）Callable接口&amp;amp;&amp;amp;FutureTask&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/mysql/</link>
      <pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/mysql/</guid>
      <description>&lt;h3 id=&#34;617-mysql-数据排序-实现&#34;&gt;617 MySQL 数据排序 实现？&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Order By 命中索引(包括索引字段)，使用索引排序(有序)，效率最高效&lt;/li&gt;&#xA;&lt;li&gt;否则使用文件排序，文件少=&amp;gt; 内存排序 sort_buffer&lt;/li&gt;&#xA;&lt;li&gt;文件大=&amp;gt;外部排序，归并排序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;内部排序细节：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/redis/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/redis/</guid>
      <description>&lt;h3 id=&#34;637-常见的数据类型&#34;&gt;637 常见的数据类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;String&lt;/li&gt;&#xA;&lt;li&gt;Set&lt;/li&gt;&#xA;&lt;li&gt;Hash&lt;/li&gt;&#xA;&lt;li&gt;List&lt;/li&gt;&#xA;&lt;li&gt;Zset （Sorted Set）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;BitMap =&amp;gt; 位图，考勤，或者xxx分配情况&lt;/p&gt;&#xA;&lt;p&gt;HyperLogLog =&amp;gt; 用户访问的独立用户数量&lt;/p&gt;&#xA;&lt;p&gt;GEO =&amp;gt; 地理&lt;/p&gt;&#xA;&lt;p&gt;应用场景：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存&lt;/li&gt;&#xA;&lt;li&gt;实时系统&lt;/li&gt;&#xA;&lt;li&gt;消息队列&lt;/li&gt;&#xA;&lt;li&gt;分布式锁&lt;/li&gt;&#xA;&lt;li&gt;计数器：页面访问量、点赞数、评论数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;651-redis-主从复制的实现原理&#34;&gt;651 Redis 主从复制的实现原理&lt;/h3&gt;&#xA;&lt;p&gt;➡️主节点-从节点 的数据同步&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java面试题笔记</title>
      <link>http://121.40.252.207/posts/jobs/java/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://121.40.252.207/posts/jobs/java/</guid>
      <description>&lt;h3 id=&#34;415-序列化反序列化&#34;&gt;415 序列化&amp;amp;反序列化&lt;/h3&gt;&#xA;&lt;p&gt;将Object转为字节流，或反之&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;普通：实现serializable接口 ˈsɪərɪəlaɪzəbl&lt;/li&gt;&#xA;&lt;li&gt;使用Jackon，Obj =&amp;gt; json格式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;416-java中的不可变类&#34;&gt;416 Java中的不可变类&lt;/h3&gt;&#xA;&lt;p&gt;final 修饰，例如String类&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
